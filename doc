This is minishell, a project that was assigned to me and my partner to replicate a shell mimicing bash.

These are all the functionalities that this project needs to be able to do:

- Display a prompt when waiting for a new command.
- Have a working history.
- Search and launch the right executable (based on the PATH variable or using a
relative or an absolute path).
- Doesnt have to interpret unclosed quotes or special characters which are not required by the subject such as \ (backslash) or ; (semicolon).
- Handle ’ (single quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence.
- Handle " (double quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence except for $ (dollar sign).
- Implement the following redirections:
	* < should redirect input.
	* > should redirect output.
	* << should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn’t have to update the history!
	* >> should redirect output in append mode.
- Implement pipes (| character). The output of each command in the pipeline is
connected to the input of the next command via a pipe.
- Handle environment variables ($ followed by a sequence of characters) which
should expand to their values.
- Handle $? which should expand to the exit status of the most recently executed
foreground pipeline.
- Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
	* ctrl-C displays a new prompt on a new line.
	* ctrl-D exits the shell.
	* ctrl-\ does nothing.
- Your shell must implement the following built-in commands:
	* echo with option -n
	* cd with only a relative or absolute path
	* pwd with no options
	* export with no options
	* unset with no options
	* env with no options or arguments
	* exit with no options

First thing was to create a man struct, ours was t_shell:

typedef struct s_shell
{
	bool	flag;
	int		exit_status;
	char	*input;
	char	*path;
	char	**array;
	t_env	*env;
	t_token	*token;
	t_pipe	*pipe;
}		t_shell;

with key data for the functioning of the project

- flag, as the name implies is a flag that i added to prevent unnecessary actions as you will see in the future

- exit_status is an int to store the exit status of the last command

- input, is the string which will store every prompt inserted by the user

- 